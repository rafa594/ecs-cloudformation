Description: >
  This template deploys an ECS Service


Parameters:
  
    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    ImageUrl:
        Type: String
        Description: Url for image in ECR repository.
      
    VPC:
        Type: String
        Description: VPC
    
    PublicListener:
        Type: String
        Description: Public LoadBalancer Listener
    
    ServiceName:
        Type: String
        Description: Service Name
    
    ASGRole:
        Type: String
        Description: AutoScaling Group Role

    ECSCluster:
        Type: String
        Description: ECS Cluster
      


Resources:

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
          LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:          
            ContainerDefinitions:
            -   Name: !Ref ServiceName
                Image: !Ref ImageUrl
                Memory: 300
                Essential: true
                PortMappings:
                    - 
                        ContainerPort: 80
                        HostPort: 80
                LogConfiguration:
                    LogDriver: 'awslogs'
                    Options:
                        awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
                        awslogs-region: !Ref 'AWS::Region'
                        awslogs-stream-prefix: !Ref 'ServiceName'
            
            RequiresCompatibilities: 
                -  EC2
            Tags:
                -   Key: Name
                    Value: !Sub ${EnvironmentName}TaskDefinition
    
    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 6
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Name: !Ref ServiceName
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 2
            VpcId: !Ref VPC

    LoadBalancerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                -   TargetGroupArn: !Ref TargetGroup
                    Type: 'forward'
            Conditions:
                -   Field: path-pattern
                    Values: [/]
            ListenerArn: !Ref  PublicListener
            Priority: 1
        
    
            
    Service:
        Type: AWS::ECS::Service
        DependsOn: LoadBalancerRule
        Properties:
            ServiceName: !Ref ServiceName
            Cluster: !Ref ECSCluster
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 100
            DesiredCount: 1
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
                -   ContainerName: !Ref ServiceName
                    ContainerPort: 80
                    TargetGroupArn: !Ref TargetGroup

    ScalableTarget:
        Type: AWS::ApplicationAutoScaling::ScalableTarget
        DependsOn: Service
        Properties:
            ServiceNamespace: 'ecs'
            ScalableDimension: 'ecs:service:DesiredCount'
            ResourceId: !Join ['/', [service, !Ref 'ECSCluster', !Ref ServiceName]]                
            MinCapacity: 1
            MaxCapacity: 1
            RoleARN: !Ref ASGRole